<?php
/**
 * @file
 * vCard is a file format standard for electronic business cards.
 *
 * vCards are often attached to e-mail messages, but can be exchanged in other ways,
 * such as on the World Wide Web. (http://en.wikipedia.org/wiki/Vcard)
 *
 * @author
 * Shabbir Reshamwala <shabbir_reshamwala@yahoo.com>
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\user\Entity\User;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_help().
 */
function vcard_help($route_name, RouteMatchInterface $route_match){
  $microformat = Link::fromTextAndUrl(t('microformat'), Url::fromUri
  ('http://microformats.org'))->toString();
	switch ($route_name) {
    case 'help.page.vcard':
      $aggregation = Link::fromTextAndUrl(t('aggregation tools'), Url::fromUri
      ('https://addons.mozilla.org/en-US/firefox/addon/2240'))->toString();
      $hcard = Link::fromTextAndUrl(t('hcard'), Url::fromUri
      ('http://microformats.org/wiki/hcard'))->toString();

      $output = '<p>' . t('vCard automates the exchange of personal
      information typically  found on a traditional business card. vCard is 
      used in applications such as Internet mail, voice mail, Web browsers, 
      telephony applications, call centers, video conferencing, PIMs 
      (Personal Information Managers), PDAs (Personal Data Assistants), 
      pagers, fax, office equipment, and smart cards. vCard information goes 
      way beyond simple text, and includes elements like pictures, company 
      logos, live Web addresses, and so on.') . '</p>';

      $output .= '<p>' . t('Web browsers and @aggregation  
      can also extract and use vCard-like information when it is displayed on
      the page using @hcard - an embedded @microformat', array
      ('@aggregation' => $aggregation, '@hcard' => $hcard, '@microformat' => $microformat)) . '</p>';

      $output .= '<p>' . t('Read the module\'s documentation for more information on how to add hCard support to your theme.') . '</p>';
      return $output;

    case 'entity.user.field_ui_fields':
      $vcard_settings = Link::fromTextAndUrl(t('the VCard settings'),
        Url::fromUserInput('/admin/config/media/vcard'))->toString();
      $vcard_help = Link::fromTextAndUrl(t('vCard help'), Url::fromUserInput
      ('/admin/help/vcard'))->toString();

      $output = '<p>'. t('For assistance setting up a default profile with 
      common fields, visit @vcard_settings which can map vCard fields with 
      your custom profile fields.', array('@vcard_settings' => $vcard_settings)) . '</p>';
      $output .= '<p>' .  t('To enable machine-readable @microformats for 
      your profiles, see the @vcard_help and README', array('@microformats' => $microformat, '@vcard_help' => $vcard_help));
      return $output;

    case 'vcard.settings':
      $profile_settngs_link = Link::fromTextAndUrl(t('the Profile Configuration page'), Url::fromUserInput('/admin/config/people/accounts/fields'))->toString();
      $output = t('Profile fields are added and administered on @profile_settings_link .', array('@profile_settings_link' => $profile_settngs_link));
      return $output;
  }
}

/**
 * Ensures the vcard PEAR library is available and returns the vCard builder
 * object.
 *
 * @return vCard object, null if library is not available.
 */
function _vcard_init(){
  if (@include_once('File/IMC.php')) {
    $vcard =& File_IMC::build('vCard', '3.0');
  }
  elseif (@include_once('Contact_Vcard_Build.php')) {
    $vcard = new Contact_Vcard_Build();
  }
  return empty($vcard) ? FALSE : $vcard;
}

/**
 *
 */
function _vcard_properties(){
  return array(
    'givenname'     => 'Given Name',
    'familyname'    => 'Family name',
    'mail'          => 'Email Address',
    'birthday'      => 'Birthday',
    'organization'  => 'Organization',
    'telephone'     => 'Telephone',
    'url'           => 'URL',
    'street'        => 'Street',
    'city'          => 'City',
    'postal'        => 'Postal',
    'province'      => 'Province',
    'country'       => 'Country',
  );
}

/**
 * Implements hook_entity_extra_field_info().
 */
function vcard_entity_extra_field_info(){
  $extra = array();
  $extra['user']['user']['display']['vcard_download'] = array(
    'label' => t('Vcard Download'),
    'description' => t('Download Your Vcard'),
    'weight' => 100,
    'visible' => TRUE,
  );
  $extra['user']['user']['display']['hcard'] = array(
    'label' => t('hCard Download'),
    'description' => t('hCard'),
    'weight' => 99,
    'visible' => TRUE,
  );
  return $extra;
}

/**
 * hook_ENTITY_TYPE_view
 */
function vcard_user_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  //$user_fields = get_user_fields_for_template($entity);
  $config = \Drupal::config('vcard.settings');
  $user_id = $entity->id();
  $account = User::load($user_id);

  if($account->hasPermission('have vcard') && ($account->hasPermission('download vcard') || $account->hasPermission('download vcard with email')) && _vcard_init()) {
    $display_link = $config->get('vcard_display_profile_link', 1);
    $display_hcard = $config->get('vcard_display_profile_hcard', 1);
    if ($display_link || $display_hcard) {
      $build['vcard'] = [
        '#type' => 'markup',
        '#markup' => t('vCard'),
      ];
    }
    if ($display_hcard) {
      $build['hcard'] = [
        '#title' => 'hCard',
        '#theme' => 'vcard',
        '#user' => $account,
        '#prefix' => '<h3 class="hcard">' . t('hCard') . '</h3>',
        '#weight' => 99,
        '#attributes' => array('class' => 'vcard-hcard'),
      ];
    }
    if ($display_link) {
      $build['vcard_download'] = [
        '#title' => 'Download',
        '#prefix' => '<h3 class="vcard-download">' . t('Download') . '</h3>',
        '#markup' =>  Link::fromTextAndUrl(t('Download vcard'), Url::fromUserInput("/user/$user_id/vcard"))->toString(),
        '#weight' => 100,
        '#attributes' => array('class' => 'vcard-link'),
      ];
    }
  }
}

/**
 * vCard get User field names
 */
function vcard_get_user_fields(){
  $user = User::load(\Drupal::currentUser()->id());
  $user_fields = $user->getFieldDefinitions('user', 'user');
  foreach ($user_fields as $field_name => $field_definition) {
    //if (!empty($field_definition->getTargetBundle())) {
    if ($field_definition->getFieldStorageDefinition()->isBaseField() == FALSE) {
      $options[$field_name] = $field_definition->getLabel();
    }
  }
  return $options;
}

/**
 * Retrieve a user's vcard
 *
 * @return  a vcard object structure with formatted values in the fields
 */
function vcard_get($user) {
  $vcard_raw = vcard_get_raw($user);
  $name = $user->get('name')->value;
  $vcard = _vcard_init();
  $vcard->addParam('ENCODING', '8BIT');
  $config = \Drupal::config('vcard.settings');
  $user_fields = vcard_get_user_fields();
  $picture=$user->get('user_picture')->entity;

  foreach ($user_fields as $key => $value) {
    // Firstname
    if ($config->get('vcard_user_fields_'. $key, '')  == 'givenname')
      $givenname = $vcard_raw->$key;
    // Lastname
    if ($config->get('vcard_user_fields_'. $key, '')  == 'familyname')
      $familyname = $vcard_raw->$key;
    // Birthday
    if ($config->get('vcard_user_fields_'. $key, '')  == 'birthday')
      $birthday = $vcard_raw->$key;
    // Telephone
    if ($config->get('vcard_user_fields_'. $key, '')  == 'telephone')
      $telephone = $vcard_raw->$key;
    // Organization
    if ($config->get('vcard_user_fields_'. $key, '')  == 'organization')
      $organization = $vcard_raw->$key;
    // URL
    if ($config->get('vcard_user_fields_'. $key, '')  == 'url')
      $url = $vcard_raw->$key;
    // Address
    $street = $config->get('vcard_user_fields_'. $key, '')  == 'street' ? $vcard_raw->$key : '';
    $city = $config->get('vcard_user_fields_'. $key, '')  == 'city' ? $vcard_raw->$key : '';
    $province = $config->get('vcard_user_fields_'. $key, '')  == 'province' ? $vcard_raw->$key : '';
    $postal = $config->get('vcard_user_fields_'. $key, '')  == 'postal' ? $vcard_raw->$key : '';
    $country = $config->get('vcard_user_fields_'. $key, '')  == 'country' ? $vcard_raw->$key : '';
  }

  //Picture
  if ($picture != '') {
    $user_picture = $picture->url();
    $vcard->setPhoto($user_picture);
    $vcard->addParam('VALUE', 'uri');
    $vcard->addParam('ENCODING', '8BIT');
  }

  //Combining Firstname and Lastname
  if(isset($givenname) && isset($familyname)) {
    $vcard->setName($familyname, $givenname, '', '', '');
    $vcard->addParam('ENCODING', '8BIT');
    $vcard->setFormattedName($givenname . ' ' . $familyname);
    $vcard->addParam('ENCODING', '8BIT');
  }
  else {
    $vcard->setName(HTML::escape($name), '', '', '', '');
    $vcard->addParam('ENCODING', '8BIT');
    $vcard->setFormattedname(HTML::escape($name));
    $vcard->addParam('ENCODING', '8BIT');
  }

  // Email
  if(!empty($user->get('mail'))) {
    $mail = $user->get('mail')->value;
    $vcard->addEmail(HTML::escape($mail));
    $vcard->addParam('ENCODING', '8BIT');
  }

  // Nickname
  $vcard->addNickname(HTML::escape($name));
  $vcard->addParam('ENCODING', '8BIT');

  // Birthday
  if (isset($birthday)) {
    if (is_array($birthday)) {
      $bday = $birthday['year'] . '-' . $birthday['month'] . '-' . $birthday['day'];
      $vcard->setBirthday($bday);
    }
    else {
      $vcard->setBirthday($birthday);
    }
    $vcard->addParam('ENCODING', '8BIT');
  }
  // Address
  if (isset($street) || isset($city) || isset($province) || isset($postal) || isset($country)) {
    $vcard->addAddress($street, $city, $province, $postal, $country);
    $vcard->addParam('ENCODING', '8BIT');
  }
  // Telephone
  if (isset($telephone)) {
    $vcard->addTelephone($telephone);
    $vcard->addParam('ENCODING', '8BIT');
  }

  // Organization
  if (isset($organization)) {
    $vcard->addOrganization($organization);
    $vcard->addParam('ENCODING', '8BIT');
  }
  // URL
  if (isset($url)) {
    $vcard->setURL($url);
    $vcard->addParam('ENCODING', '8BIT');
  }

  return $vcard;
}

/**
 * Return one vCard property
 */
function vcard_get_raw_field($field, $user) {
  $vcard_raw = vcard_get_raw($user);
  return isset($vcard_raw[$user->id()]->{$field}) ? $vcard_raw[$user->id()]->{$field} : NULL;
}

/**
 * Assemble a raw vcard data structure
 */
function vcard_get_raw($user) {
  static $vcard_raw = array();
  if (empty($vcard_raw[$user->id()])) {
    $vcard_raw[$user->id()] = (object) _vcard_get_map($user);
    $picture=$user->get('user_picture')->entity;
    if ($picture != '') {
      $vcard_raw[$user->id()]->picture = $picture->url();
    }

    if (\Drupal::currentUser()->hasPermission('download vcard with email')) {
      $vcard_raw[$user->id()]->mail = $user->mail;
    }
  }

  // Allow to alter the values
  \Drupal::moduleHandler()->alter('vcard_data', $vcard_raw[$user->id()]);
  return $vcard_raw[$user->id()];
}

/**
 * Returns an array of profilefield-to-vcard attribute fieldnames
 */
function _vcard_get_map($user) {
  $account = User::load($user->id());
  $user_fields = $account->getFieldDefinitions('user', 'user');
  foreach ($user_fields as $field_name => $field_definition) {
    if ($field_definition->getFieldStorageDefinition()->isBaseField() == FALSE) {
      $map[$field_name] = $account->get($field_name)->value;
    }
  }
  return $map;
}

/**
 * Implement hook_theme().
 */
function vcard_theme() {
  return array(
    'vcard' => array(
      'variables' => array('user' => NULL),
      'template' => 'vcard',
    ),
  );
}

/**
 * Process variables for vcard.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $account: A user object with 'name', 'uid' and 'picture' fields.
 * - $show_title: A boolean to trigger the title.
 *
 * @see vcard.tpl.php
 */
function template_preprocess_vcard(&$variables) {
  $user = $variables['user'];

  $vcard_raw = vcard_get_raw($user);
  $name = $user->get('name')->value;
  $user_fields = vcard_get_user_fields();
  $config = \Drupal::config('vcard.settings');
  $picture = $user->get('user_picture')->entity;

  foreach ($user_fields as $key => $value) {
    // Firstname
    if ($config->get('vcard_user_fields_'. $key, '')  == 'givenname')
      $givenname = $vcard_raw->$key;
    // Lastname
    if ($config->get('vcard_user_fields_'. $key, '')  == 'familyname')
      $familyname = $vcard_raw->$key;
    // Birthday
    if ($config->get('vcard_user_fields_'. $key, '')  == 'birthday')
      $birthday = $vcard_raw->$key;
    // Telephone
    if ($config->get('vcard_user_fields_'. $key, '')  == 'telephone')
      $telephone = $vcard_raw->$key;
    // Organization
    if ($config->get('vcard_user_fields_'. $key, '')  == 'organization')
      $organization = $vcard_raw->$key;
    // URL
    if ($config->get('vcard_user_fields_'. $key, '')  == 'url')
      $url = $vcard_raw->$key;
  }

  //Picture
  if ($picture != '') {
    //$filepath = Drupal\image\Entity\ImageStyleImageStyle::load('medium')->buildUri($picture->getFileUri());
    $variables['user_image'] = $picture->url();
  }
  $variables['user'] = $user;
  $variables['vcard']   = $vcard_raw;
  $variables['givenname']   = $givenname;
  $variables['familyname']   = $familyname;
  $variables['name'] = $name;
  $variables['email'] = $user->get('mail')->value;
  $variables['birthday'] = $birthday;
  $variables['telephone'] = $telephone;
  $variables['organization'] = $organization;
  $variables['url'] = $url;
  $variables['user_fields'] = $user_fields;

}
